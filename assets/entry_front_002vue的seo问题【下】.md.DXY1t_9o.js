import{_ as e,c as s,o as i,ao as t}from"./chunks/framework.B_KIjQED.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"entry/front/002vue的seo问题【下】.md","filePath":"entry/front/002vue的seo问题【下】.md","lastUpdated":1693989932000}'),n={name:"entry/front/002vue的seo问题【下】.md"};function p(l,a,o,c,r,h){return i(),s("div",null,a[0]||(a[0]=[t(`<p>之前我对vue的seo也仅仅停留在理论方面，并没有实际进行过优化，也不知道具体效果会是什么样的，恰巧公司官网上线三个月后需求增加不是那么多，所以想停下来先对官网进行优化。</p><p>首先是选择哪种方案进行优化，上篇文章提到过，vue的seo解决方案有很多种，常见的如下</p><ol><li>vue官方服务端渲染</li><li>vue-meta-info</li><li>nuxt</li><li>phantomjs</li></ol><p>等等，首先我只调研了两种，vue官方的解决方案和nuxt。</p><p>vue官方的解决方案并不复杂（不要被ssr这个词吓到），这个是服务端预渲染，需要后端配合，我做的是通过node解析前端网页的，但是也就是因为这个，需要后端配合，这明明是前端优化，还要说服后端（这估计是所有前端不远面对的，毕竟接口让他多传一个字段就得说半天），所以我果断放弃了这个方案。</p><p>后来我看了nuxt官网，发现这个成本是非常低的，如果你的网站不大，通常两天时间就能迁移完成（我们公司的官网花了一周时间）。这其实对于一个项目的优化是可以接受的，毕竟如果这个做好了是可以为公司创造收益的。</p><p>关于nuxt框架具体怎么用，这里就不多介绍了，因为官网说的很详细，<a href="https://zh.nuxtjs.org/" target="_blank" rel="noreferrer">地址</a>，下面说一下从老项目迁移到新项目具体的过程：</p><h2 id="依赖如何处理" tabindex="-1">依赖如何处理 <a class="header-anchor" href="#依赖如何处理" aria-label="Permalink to &quot;依赖如何处理&quot;">​</a></h2><p><a href="https://zh.nuxtjs.org/docs/2.x/directory-structure/plugins" target="_blank" rel="noreferrer">nuxt官网插件部分</a>提到，如果想使用一个插件，首先下载插件，然后在<code>plugins</code>目录下新建关于该插件的文件，然后引入改插件，我们以<code>element-ui</code>插件为例：</p><blockquote><p>首先在<code>plugins</code>目录下新建<code>element.js</code>,在文件中导入<code>element-ui</code></p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> VTooltip </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;element-ui&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Vue.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">use</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ui)</span></span></code></pre></div><blockquote><p>接下来在<code>nuxt.config.js</code>中引用改模块：</p></blockquote><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  plugins: [</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">     &#39;~/plugins/element.js&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>因为<code>plugins</code>的数据结构是数组，所以我们可以添加任何我们想添加的依赖。</p><h2 id="页面中数据请求如何操作" tabindex="-1">页面中数据请求如何操作 <a class="header-anchor" href="#页面中数据请求如何操作" aria-label="Permalink to &quot;页面中数据请求如何操作&quot;">​</a></h2><p><code>nuxt</code>数据请求和之前就有些出入了，我们需要把请求的接口放在<code>asyncData</code>函数中，<code>asyncData</code>函数有点像<code>vue3</code>中的<code>组合式 API</code>,我们需要把所有的接口集成在<code>asyncData</code>中, 写法如下：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>async asyncData({ $axios }) {</span></span>
<span class="line"><span>    const getList1 = await $axios.$get(&#39;接口1&#39;)</span></span>
<span class="line"><span>    const getList2 = await $axios.$get(&#39;接口2&#39;)</span></span>
<span class="line"><span>    return { getList1, getList2 }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>当然我们也可以对我们的请求添加很多配置，比如请求头，代理等等，具体可以查看<a href="https://axios.nuxtjs.org/" target="_blank" rel="noreferrer">nuxt/axios</a></p><h2 id="老项目中的代码如何迁移" tabindex="-1">老项目中的代码如何迁移 <a class="header-anchor" href="#老项目中的代码如何迁移" aria-label="Permalink to &quot;老项目中的代码如何迁移&quot;">​</a></h2><p>这里建议，在拷贝代码的时候，一个模块一个模块的操作，避免一次性出现太多bug的时候无法排查，这里说的包含一个模块所有的文件，包含<code>api, css，组件，工具类，局部依赖</code>等等，这里的顺序建议如下：</p><ol><li>先拷贝组件代码，因为组件才是最核心的代码，一般其他所有的文件都和组件有关</li><li>拷贝样式文件，拷贝完后，需要将样式导入在<code>nuxt.config.js</code>中引用该样式文件</li><li>拷贝其他文件，这时候我们就可以有针对性的修改我们的组件了，或者我们在构建的时候后台会有报错，这都需要我们一个一个的解决</li></ol><h2 id="其他关于seo的细节" tabindex="-1">其他关于seo的细节 <a class="header-anchor" href="#其他关于seo的细节" aria-label="Permalink to &quot;其他关于seo的细节&quot;">​</a></h2><p>这个就是我们老生常谈的问题了，我们在写<code>vue</code>之前就已经非常熟悉了，比如一个网页只能有一个<code>h1</code>，给图片加<code>title</code>等等，这里就不一一介绍了，前几天我看了一篇文章<a href="https://juejin.cn/post/6844903824428105735" target="_blank" rel="noreferrer">前端seo优化</a>写的很详细，可以按照里边的一一修改</p><h2 id="除了修改代码-我们还能做些什么" tabindex="-1">除了修改代码，我们还能做些什么 <a class="header-anchor" href="#除了修改代码-我们还能做些什么" aria-label="Permalink to &quot;除了修改代码，我们还能做些什么&quot;">​</a></h2><p>按照百度的说法，如果一个网站被认证过，那么他被抓取的机会也会有所提高，所以我特意去查了一下认证的价格，添加一个官网的标识一年也就三千多块钱，这对一个企业来说应该算不什么钱，况且网页收录的多了，提高的收益可不只3000，所以我们要想好好做，可以去申请一下。<a href="https://trust.baidu.com/vstar/official/intro?type=gw" target="_blank" rel="noreferrer">传送门</a></p><h2 id="看一下我们网站的最后效果" tabindex="-1">看一下我们网站的最后效果 <a class="header-anchor" href="#看一下我们网站的最后效果" aria-label="Permalink to &quot;看一下我们网站的最后效果&quot;">​</a></h2><p>其实效果还是挺明显的，我们可以右键查看源代码，几乎所有的网站结构都出来了。</p><blockquote><p>这个是首页的</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2150db3c2db3420fa61ef4a17e63befd~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><blockquote><p>这个是列表页的 <img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5c1cc099c8d4506bcae65c5a2046b8b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p></blockquote><blockquote><p>我们开一下百度的收录情况</p></blockquote><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b213fbbfb33440539c776fead7c11314~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>收录的不仅是首页和一级菜单页面，而且连小区和房源详情页面也有收录</p><blockquote><p>谷歌收录情况</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c03bcc8a926a46879773c117c89ab88b~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>所以，综上所述，使用<code>nuxt</code>提升网站的收录是非常有效果的，而且成本不高，难度也不大，我们可以在此基础上根据自己网站的实际情况做有针对性的优化。</p><p>原创不易，如果这篇文章对你有帮助，点个赞吧！（手动下跪）</p>`,37)]))}const u=e(n,[["render",p]]);export{k as __pageData,u as default};
